<html xmlns="https://github.com/avaloniaui"
      xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
      x:Class="wwwroot.index"
      title="HtmlML Demo">
  <head>
    <title>HtmlML Demo</title>
    <!-- Linked CSS via <link rel="stylesheet" href="...css" type="text/css"/> -->
    <link rel="stylesheet" href="avares://website/Assets/demo.css" type="text/css" />
    <!-- Inline CSS via <style type="text/css"> -->
    <style type="text/css">
      <![CDATA[
      .hero { color: red; }
      .card { margin: 8px 0; }
      ]]>
    </style>
    <!-- Inline JavaScript to demo canvas drawing -->
    <script type="text/javascript">
      <![CDATA[
      (() => {
        const canvasId = 'draw';
        let ctx = null;
        let drawing = false;

        const ensureCtx = () => {
          if (ctx) return true;
          const canvas = document.getElementById(canvasId);
          if (!canvas) return false;
          ctx = canvas.getContext('2d');
          ctx.strokeStyle = '#202020';
          ctx.lineWidth = 2;
          return true;
        };

        globalThis.onPointerEvent = (id, type, x, y) => {
          if (id !== canvasId) return;
          if (!ensureCtx()) return;
          switch (type) {
            case 'pointerdown':
              drawing = true;
              ctx.beginPath();
              ctx.moveTo(x, y);
              break;
            case 'pointermove':
              if (!drawing) return;
              ctx.lineTo(x, y);
              ctx.stroke();
              break;
            case 'pointerup':
            case 'pointercancel':
              drawing = false;
              break;
          }
        };

        /* DOM-like demo: build a dynamic section and tweak classes */
        const card = document.createElement('section');
        card.setAttribute('class', 'card');
        const title = document.createElement('h2');
        title.textContent = 'DOM API Demo';
        const para = document.createElement('p');
        para.textContent = 'This section was created from JavaScript.';
        card.appendChild(title);
        card.appendChild(para);
        /* Append to body */
        const body = document.body;
        body.appendChild(card);

        /* Query and tweak list */
        const firstList = document.querySelector('ul');
        if (firstList) {
          const item = document.createElement('li');
          const p = document.createElement('p');
          p.textContent = 'Item added via JS';
          item.appendChild(p);
          firstList.appendChild(item);
        }

        /* Style anchors via classList */
        const links = document.querySelectorAll('a');
        for (const el of links) {
          el.classListAdd('muted');
        }

        /* setTimeout demo */
        window.setTimeout(() => {
          const p2 = document.createElement('p');
          p2.textContent = 'Added after 1s via setTimeout';
          card.appendChild(p2);
        }, 1000);
        /* requestAnimationFrame demo - animate a moving bar on a dynamic canvas */
        (() => {
          const anim = document.createElement('canvas');
          anim.setAttribute('id', 'anim');
          anim.setAttribute('width', '600');
          anim.setAttribute('height', '120');
          anim.setAttribute('class', 'card');
          anim.setAttribute('style', 'background:#f0f0f0');
          const section = document.createElement('section');
          section.setAttribute('class', 'card');
          const h2 = document.createElement('h2'); h2.textContent = 'Animation';
          const p = document.createElement('p'); p.setAttribute('class','muted'); p.textContent = 'Simple JS animation using requestAnimationFrame';
          section.appendChild(h2); section.appendChild(p); section.appendChild(anim);
          document.body.appendChild(section);

          /* Delay until canvas is attached so getElementById returns canvas wrapper */
          const start = () => {
            const animCanvas = document.getElementById('anim');
            if (!animCanvas) { window.setTimeout(start, 0); return; }
            const ctx2 = animCanvas.getContext('2d');
            const w = 600, h = 120;
            const loop = (ts) => {
              const t = ts * 0.004;
              ctx2.clearRect(0, 0, w, h);
              ctx2.beginPath();
              ctx2.moveTo(20, h/2);
              const x = 20 + (Math.sin(t) * 0.5 + 0.5) * (w - 40);
              ctx2.lineTo(x, h/2);
              ctx2.stroke();
              window.requestAnimationFrame(loop);
            };
            window.requestAnimationFrame(loop);
          };
          window.requestAnimationFrame(start);
        })();
      })();
      ]]>
    </script>
  </head>

  <body scroll="auto" class="app-body">

    <header class="card">
      <h1 class="hero" title="Heading tooltip">HtmlML Demo</h1>
      <p class="muted">Demonstrates elements, classes, and styles.</p>
      <nav>
        <p>
          <a href="https://github.com/wieslawsoltes/HtmlML">GitHub</a> | 
          <a href="https://avaloniaui.net/">Avalonia</a>
        </p>
      </nav>
    </header>

    <section class="card" id="intro">
      <h2>Headings</h2>
      <h3>Subheading</h3>
      <h4>H4 title</h4>
      <h5>H5 title</h5>
      <h6>H6 title</h6>
      <p>Text with <strong>bold</strong>, <em>italic</em>, <code>code</code>, and a <a href="https://example.com">link</a>.</p>
    </section>

    <section class="card" id="lists">
      <h2>Lists</h2>
      <ul>
        <li><p>Unordered item one</p></li>
        <li><p>Unordered item two</p></li>
      </ul>
      <ol>
        <li><p>First</p></li>
        <li><p>Second</p></li>
      </ol>
    </section>

    <section class="card" id="media">
      <h2>Image</h2>
      <img src="avares://website/Assets/logo.png" alt="Logo" title="Image tooltip" />
      <p class="muted">(Provide Assets/logo.png to see the image)</p>
    </section>

    <hr class="spaced" />

    <article class="card">
      <h2>Article</h2>
      <p title="Tooltip" disabled="true">Disabled paragraph with tooltip.</p>
    </article>

    <aside class="card">
      <p style="text-align:center;color:#666">Aside content</p>
    </aside>

    <footer class="card">
      <p>Footer</p>
    </footer>

    <section class="card" id="canvas-demo">
      <h2>Canvas Draw</h2>
      <p class="muted">Drag on the canvas to draw lines</p>
      <canvas id="draw" width="600" height="300" class="card" style="background:#ffffff" />
    </section>

  </body>

</html>
